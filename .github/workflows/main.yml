name: Maven CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
            
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17
       
    - name: Update pom version
      working-directory: ./myapp 
      run: mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} versions:commit
    - name: Commit version changes
      run: |
        git config --global user.name 'Yan Giber'
        git config --global user.email 'yangiber@gmail.com'
        git commit -am "Automated report"
        git push  
    - name: Build and test project with Maven
      run: mvn -B package --file myapp/pom.xml

    
  publish-job:
      runs-on: ubuntu-latest
      needs: [build_and_test]
      steps:
        - uses: actions/checkout@v2
        - uses: actions/setup-java@v1
          with:
            java-version: 17
        - run: mvn -B package --file myapp/pom.xml -DskipTests
        - run: mkdir staging && cp ${GITHUB_WORKSPACE}/myapp/target/*.jar staging
        - uses: actions/upload-artifact@v1
          with:
            name: Package
            path: staging
  
  build-docker-image:
    name: Publish to Docker Hub
    runs-on: ubuntu-latest
    needs: [build_and_test]

    steps:
      - uses: actions/checkout@v2
      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username  ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Get version
        working-directory: ./myapp
        run: |
          VERSION=$( mvn help:evaluate -Dexpression=project.version -q -DforceStdout )
          echo "name=version::$VERSION"
        id: get_version  
      - name: Build Container image
        run: docker build -t ${{ secrets.DOCKER_REPO }}:$VERSION .
      - name: Publish Docker image
        run: docker push ${{ secrets.DOCKER_REPO }}:$VERSION
